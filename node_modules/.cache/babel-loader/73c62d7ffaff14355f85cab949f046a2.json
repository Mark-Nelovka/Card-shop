{"ast":null,"code":"import { gql } from \"@apollo/client\";\nimport { client } from \"../index\";\nimport Notiflix from \"notiflix\";\nimport { Component } from \"react\";\nexport default class Api extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.getAllProduct = async () => {\n      try {\n        const result = await client.query({\n          query: gql`\n          query {\n            category {\n              products {\n                id\n                gallery\n                brand\n                inStock\n\n                name\n                prices {\n                  amount\n                  currency {\n                    symbol\n                  }\n                }\n              }\n            }\n          }\n        `\n        });\n        return result.data.category.products;\n      } catch (error) {\n        console.log(error.message);\n        Notiflix.Notify.failure(`${error.message}`);\n      }\n    };\n\n    this.getProductId = async id => {\n      try {\n        const product = await client.query({\n          query: gql`\n          query {\n            product(id: \"${id}\") {\n              name\n              brand\n               description\n               prices {\n    amount\n    currency {\n      symbol\n    }\n  }\n              gallery \n              id\n              attributes {\n                id\n                items {\n                  value\n                }\n              }\n            }\n          }\n        `\n        });\n        return [product.data.product];\n      } catch (error) {\n        Notiflix.Notify.failure(`${error.message}`);\n      }\n    };\n\n    this.getCurrencies = async () => {\n      try {\n        const currencies = await client.query({\n          query: gql`\n          query {\n            currencies {\n              label\n              symbol\n            }\n          }\n        `\n        });\n        return currencies.data.currencies;\n      } catch (error) {\n        Notiflix.Notify.failure(`${error.message}`);\n      }\n    };\n  }\n\n}","map":{"version":3,"names":["gql","client","Notiflix","Component","Api","getAllProduct","result","query","data","category","products","error","console","log","message","Notify","failure","getProductId","id","product","getCurrencies","currencies"],"sources":["/Users/marknelovka/Desktop/Goit/React/shop/src/components/Api.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\nimport { client } from \"../index\";\nimport Notiflix from \"notiflix\";\nimport { Component } from \"react\";\n\nexport default class Api extends Component {\n  getAllProduct = async () => {\n    try {\n      const result = await client.query({\n        query: gql`\n          query {\n            category {\n              products {\n                id\n                gallery\n                brand\n                inStock\n\n                name\n                prices {\n                  amount\n                  currency {\n                    symbol\n                  }\n                }\n              }\n            }\n          }\n        `,\n      });\n      return result.data.category.products;\n    } catch (error) {\n      console.log(error.message);\n      Notiflix.Notify.failure(`${error.message}`);\n    }\n  };\n\n  getProductId = async (id) => {\n    try {\n      const product = await client.query({\n        query: gql`\n          query {\n            product(id: \"${id}\") {\n              name\n              brand\n               description\n               prices {\n    amount\n    currency {\n      symbol\n    }\n  }\n              gallery \n              id\n              attributes {\n                id\n                items {\n                  value\n                }\n              }\n            }\n          }\n        `,\n      });\n      return [product.data.product];\n    } catch (error) {\n      Notiflix.Notify.failure(`${error.message}`);\n    }\n  };\n\n  getCurrencies = async () => {\n    try {\n      const currencies = await client.query({\n        query: gql`\n          query {\n            currencies {\n              label\n              symbol\n            }\n          }\n        `,\n      });\n      return currencies.data.currencies;\n    } catch (error) {\n      Notiflix.Notify.failure(`${error.message}`);\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,eAAe,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;EAAA;IAAA;;IAAA,KACzCE,aADyC,GACzB,YAAY;MAC1B,IAAI;QACF,MAAMC,MAAM,GAAG,MAAML,MAAM,CAACM,KAAP,CAAa;UAChCA,KAAK,EAAEP,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QApBwC,CAAb,CAArB;QAsBA,OAAOM,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqBC,QAA5B;MACD,CAxBD,CAwBE,OAAOC,KAAP,EAAc;QACdC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;QACAZ,QAAQ,CAACa,MAAT,CAAgBC,OAAhB,CAAyB,GAAEL,KAAK,CAACG,OAAQ,EAAzC;MACD;IACF,CA9BwC;;IAAA,KAgCzCG,YAhCyC,GAgC1B,MAAOC,EAAP,IAAc;MAC3B,IAAI;QACF,MAAMC,OAAO,GAAG,MAAMlB,MAAM,CAACM,KAAP,CAAa;UACjCA,KAAK,EAAEP,GAAI;AACnB;AACA,2BAA2BkB,EAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QAvByC,CAAb,CAAtB;QAyBA,OAAO,CAACC,OAAO,CAACX,IAAR,CAAaW,OAAd,CAAP;MACD,CA3BD,CA2BE,OAAOR,KAAP,EAAc;QACdT,QAAQ,CAACa,MAAT,CAAgBC,OAAhB,CAAyB,GAAEL,KAAK,CAACG,OAAQ,EAAzC;MACD;IACF,CA/DwC;;IAAA,KAiEzCM,aAjEyC,GAiEzB,YAAY;MAC1B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMpB,MAAM,CAACM,KAAP,CAAa;UACpCA,KAAK,EAAEP,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;QAR4C,CAAb,CAAzB;QAUA,OAAOqB,UAAU,CAACb,IAAX,CAAgBa,UAAvB;MACD,CAZD,CAYE,OAAOV,KAAP,EAAc;QACdT,QAAQ,CAACa,MAAT,CAAgBC,OAAhB,CAAyB,GAAEL,KAAK,CAACG,OAAQ,EAAzC;MACD;IACF,CAjFwC;EAAA;;AAAA"},"metadata":{},"sourceType":"module"}