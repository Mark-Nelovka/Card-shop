[{"/Users/marknelovka/Desktop/Goit/React/shop/src/index.js":"1","/Users/marknelovka/Desktop/Goit/React/shop/src/App.js":"2","/Users/marknelovka/Desktop/Goit/React/shop/src/components/homePage.js":"3","/Users/marknelovka/Desktop/Goit/React/shop/src/components/header.js":"4","/Users/marknelovka/Desktop/Goit/React/shop/src/components/Api.js":"5","/Users/marknelovka/Desktop/Goit/React/shop/src/components/modalCurrency.js":"6","/Users/marknelovka/Desktop/Goit/React/shop/src/components/modalBag.js":"7"},{"size":939,"mtime":1654040422333,"results":"8","hashOfConfig":"9"},{"size":1543,"mtime":1654518939547,"results":"10","hashOfConfig":"9"},{"size":5688,"mtime":1654649771629,"results":"11","hashOfConfig":"9"},{"size":3409,"mtime":1654597433227,"results":"12","hashOfConfig":"9"},{"size":1811,"mtime":1654607510851,"results":"13","hashOfConfig":"9"},{"size":907,"mtime":1654513990073,"results":"14","hashOfConfig":"9"},{"size":8889,"mtime":1654650174034,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1x009tp",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/Users/marknelovka/Desktop/Goit/React/shop/src/index.js",[],[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/App.js",[],[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/homePage.js",[],[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/header.js",[],[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/Api.js",[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/modalCurrency.js",[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/modalBag.js",["42"],[],"import React, { Component } from \"react\";\nimport { v4 } from \"uuid\";\n\nexport default class ModalBag extends Component {\n  state = {\n    itemsBag: null,\n    symbol: this.props.symbol,\n    total: 0,\n    counter: 1,\n    active: null,\n    activeId: null,\n    activeAtribute: null,\n    arr: [],\n  };\n\n  qwe = React.createRef();\n\n  componentDidMount() {\n    const { symbol } = this.state;\n\n    const itemStorage = JSON.parse(localStorage.getItem(\"productItems\"));\n    if (itemStorage) {\n      const item = itemStorage.map(\n        ({ name, brand, gallery, id, prices, attributes }) => {\n          return {\n            name,\n            brand,\n            gallery: gallery[0],\n            id,\n            attributes,\n            prices,\n          };\n        }\n      );\n      const prices = item.flatMap((data) => {\n        return data.prices;\n      });\n\n      const price = prices.reduce((acc, val) => {\n        if (val.currency.symbol.trim() === symbol.trim()) {\n          return (acc += val.amount);\n        }\n        return acc;\n      }, 0);\n      this.setState({ total: price });\n      return this.setState({ itemsBag: item });\n    }\n  }\n\n  changeAmount = (e) => {\n    const { textContent, id } = e.target;\n    const { counter, itemsBag, symbol, total } = this.state;\n    this.setState((prevState) => ({\n      arr: [...prevState.arr, id],\n    }));\n    localStorage.setItem(\"qwe\", JSON.stringify([...this.state.arr, id]));\n    switch (textContent) {\n      case \"+\":\n        itemsBag.map((data) => {\n          if (data.id === id) {\n            data.prices.map((data) => {\n              if (data.currency.symbol.trim() === symbol.trim()) {\n                this.setState((prevState) => ({\n                  total: prevState.total + data.amount,\n                }));\n              }\n              return data;\n            });\n          }\n          return total;\n        });\n        this.setState((prevState) => ({\n          counter: prevState.counter + 1,\n        }));\n        break;\n      case \"-\":\n        if (counter < 2) {\n          return;\n        }\n        itemsBag.map((data) => {\n          if (data.id === id) {\n            data.prices.map((data) => {\n              if (data.currency.symbol.trim() === symbol.trim()) {\n                this.setState((prevState) => ({\n                  total: prevState.total - data.amount,\n                }));\n              }\n              return data;\n            });\n          }\n          return total;\n        });\n        this.setState((prevState) => ({\n          counter: prevState.counter - 1,\n        }));\n        break;\n\n      default:\n        return counter;\n    }\n  };\n\n  selectActive = (e) => {\n    const { id } = e.target;\n    const { index } = e.target.dataset;\n    const { name } = e.target.dataset;\n    this.setState({\n      active: index,\n      activeId: id,\n      activeAtribute: name,\n    });\n  };\n\n  render() {\n    const {\n      itemsBag,\n      symbol,\n      total,\n      counter,\n      active,\n      activeId,\n      activeAtribute,\n      arr,\n    } = this.state;\n    return (\n      <div className=\"modal_container-bag\">\n        {itemsBag ? (\n          <div>\n            <p className=\"bag_title\">\n              <span>My bag,</span>\n              {` ${itemsBag.length} items`}\n            </p>\n            <ul className=\"bag_list\">\n              {itemsBag.map(\n                ({\n                  name,\n                  brand,\n                  gallery,\n                  id,\n                  attributes,\n                  prices,\n                  activeEl,\n                }) => {\n                  return (\n                    <li key={id} className=\"bag_item\">\n                      <div className=\"bag_container-info\">\n                        <div className=\"bag_denotation\">\n                          <p>{brand}</p>\n                          <p>{name}</p>\n                          <p>\n                            {symbol.trim()}\n                            {prices.map((data) => {\n                              if (\n                                data.currency.symbol.trim() === symbol.trim()\n                              ) {\n                                return data.amount;\n                              }\n                              return \"\";\n                            })}\n                          </p>\n                        </div>\n\n                        {attributes.map((dataAtr) => {\n                          return (\n                            <div key={v4()}>\n                              <p className=\"options\">{dataAtr.id}:</p>\n                              <div className=\"options_container\">\n                                {dataAtr.items.map((dataItem, i) => {\n                                  if (dataAtr.id === \"Color\") {\n                                    return (\n                                      <button\n                                        className={\n                                          Number(active) === i &&\n                                          activeId === id &&\n                                          activeAtribute === dataAtr.id\n                                            ? \"options_color--active\"\n                                            : \"options_color\"\n                                        }\n                                        key={v4()}\n                                        onClick={this.selectActive}\n                                        ref={this.qwe}\n                                      >\n                                        <div\n                                          data-index={i}\n                                          data-name={dataAtr.id}\n                                          id={id}\n                                          style={{\n                                            backgroundColor: dataItem.value,\n                                            width: \"16px\",\n                                            height: \"16px\",\n                                          }}\n                                        ></div>\n                                      </button>\n                                    );\n                                  }\n                                  return (\n                                    <button\n                                      className={\n                                        Number(active) === i &&\n                                        activeId === id &&\n                                        activeAtribute === dataAtr.id\n                                          ? \"bag_change-options--active\"\n                                          : \"bag_change-options\"\n                                      }\n                                      key={v4()}\n                                      onClick={this.selectActive}\n                                      id={id}\n                                      data-index={i}\n                                      data-name={dataAtr.id}\n                                    >\n                                      {dataItem.value}\n                                    </button>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      <div className=\"bag_container-counter\">\n                        <button id={id} onClick={this.changeAmount}>\n                          +\n                        </button>\n                        <span>\n                          {localStorage.getItem(\"qwe\")\n                            ? arr.reduce((acc, val) => {\n                                if (id === val) {\n                                  acc += 1;\n                                }\n                                return acc;\n                              }, 0)\n                            : 1}\n                        </span>\n                        <button id={id} onClick={this.changeAmount}>\n                          -\n                        </button>\n                      </div>\n\n                      <div>\n                        <img\n                          src={gallery}\n                          alt=\"Item in bag\"\n                          width=\"121px\"\n                          height=\"auto\"\n                        />\n                      </div>\n                    </li>\n                  );\n                }\n              )}\n            </ul>\n            <div className=\"bag_container-price\">\n              <p>Total</p>\n              <p>\n                {symbol.trim()}\n                {total.toFixed(2)}\n              </p>\n            </div>\n\n            <div className=\"bag_container-btn\">\n              <button>View bag</button>\n              <button>CHECK OUT</button>\n            </div>\n          </div>\n        ) : (\n          <div>Корзина пуста</div>\n        )}\n      </div>\n    );\n  }\n}\n",{"ruleId":"43","severity":1,"message":"44","line":119,"column":7,"nodeType":"45","messageId":"46","endLine":119,"endColumn":14},"no-unused-vars","'counter' is assigned a value but never used.","Identifier","unusedVar"]