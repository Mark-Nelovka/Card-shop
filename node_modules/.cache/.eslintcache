[{"/Users/marknelovka/Desktop/Goit/React/shop/src/index.js":"1","/Users/marknelovka/Desktop/Goit/React/shop/src/App.js":"2","/Users/marknelovka/Desktop/Goit/React/shop/src/components/homePage.js":"3","/Users/marknelovka/Desktop/Goit/React/shop/src/components/header.js":"4","/Users/marknelovka/Desktop/Goit/React/shop/src/components/Api.js":"5","/Users/marknelovka/Desktop/Goit/React/shop/src/components/modalCurrency.js":"6","/Users/marknelovka/Desktop/Goit/React/shop/src/components/modalBag.js":"7","/Users/marknelovka/Desktop/Goit/React/shop/src/components/ItemPage.js":"8"},{"size":939,"mtime":1654040422333,"results":"9","hashOfConfig":"10"},{"size":1165,"mtime":1654905474000,"results":"11","hashOfConfig":"10"},{"size":9599,"mtime":1654990976679,"results":"12","hashOfConfig":"10"},{"size":3394,"mtime":1654962162329,"results":"13","hashOfConfig":"10"},{"size":2846,"mtime":1654988042067,"results":"14","hashOfConfig":"10"},{"size":912,"mtime":1654904322319,"results":"15","hashOfConfig":"10"},{"size":15582,"mtime":1654991416822,"results":"16","hashOfConfig":"10"},{"size":5973,"mtime":1654988859245,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1x009tp",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/marknelovka/Desktop/Goit/React/shop/src/index.js",[],[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/App.js",[],[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/homePage.js",["48","49"],[],"import { Component } from \"react\";\nimport { v4 } from \"uuid\";\nimport Basket from \"../images/Basket_card.svg\";\nimport ModalBag from \"./modalBag\";\nimport ItemPage from \"./ItemPage\";\nimport Api from \"./Api\";\nconst fetchProduct = new Api();\n\nexport default class HomePage extends Component {\n  state = {\n    showBasker: false,\n    productAll: [],\n    id: \"\",\n    priceHomePage: [],\n    activeSymbol: \"\",\n    bag: [],\n    activePageCart: false,\n    cartPage: false,\n    currentItem: null,\n    category: [],\n    currentCategory: null,\n  };\n\n  async componentDidMount() {\n    const activeCurrencies = localStorage.getItem(\"currencySymbol\");\n    const bagCounter = JSON.parse(localStorage.getItem(\"bagCounter\"));\n    const productInStock = [];\n    const productInStockF = [];\n    if (bagCounter) {\n      this.setState({ bag: bagCounter });\n    }\n    // * передвинул ниже для теста this.setState({ activeSymbol: activeCurrencies });\n    const result = await fetchProduct.getAllProduct();\n    const productsAll = result.map(\n      ({ gallery, id, name, prices, brand, inStock, category }) => {\n        const obj = {\n          product: gallery[0],\n          id: id,\n          name,\n          brand,\n          price: prices,\n          inStock,\n          category,\n        };\n        return obj;\n      }\n    );\n\n    for (let res of productsAll) {\n      if (!res.inStock) {\n        productInStockF.push(res);\n      } else {\n        productInStock.push(res);\n      }\n    }\n    const products = productInStock.concat(productInStockF);\n\n    const category = products\n      .map(({ category }) => {\n        return category[0].toUpperCase() + category.slice(1);\n      })\n      .filter((v, i, a) => a.indexOf(v) === i);\n    this.setState({\n      productAll: products,\n      activeSymbol: activeCurrencies,\n      category: category,\n      currentCategory: category[0],\n    });\n\n    for (let data of products) {\n      data.price.map(({ amount, currency }) => {\n        if (currency.symbol.trim() === this.state.activeSymbol.trim()) {\n          return this.setState((prevState) => {\n            return prevState.priceHomePage.push(amount);\n          });\n        }\n        return amount;\n      });\n    }\n  }\n\n  componentDidUpdate(_, state) {\n    if (state.activeSymbol !== this.props.symbolCard) {\n      state.activeSymbol = this.props.symbolCard;\n      if (state.priceHomePage.length > 0) {\n        state.priceHomePage = [];\n      }\n      for (let data of state.productAll) {\n        data.price.map(({ amount, currency }) => {\n          if (currency.symbol.trim() === this.props.symbolCard.trim()) {\n            return this.setState((prevState) => {\n              return prevState.priceHomePage.push(amount);\n            });\n          }\n          return amount;\n        });\n      }\n      return;\n    }\n  }\n\n  getId = (e) => {\n    const { id } = e.currentTarget;\n    const { btn } = e.target.dataset;\n\n    switch (e._reactName) {\n      case \"onMouseOver\":\n        if (id !== this.state.id) {\n          this.setState({ id: id });\n        }\n        break;\n      case \"onClick\":\n        if (btn === undefined) {\n          this.setState({ currentItem: id });\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  addBag = async (e) => {\n    localStorage.removeItem(\"bagCounter\");\n    const { id } = e.currentTarget;\n    const { btn } = e.target.dataset;\n    if (btn === undefined) {\n      this.setState({ currentItem: null });\n    }\n    const { bag } = this.state;\n    const productId = await fetchProduct.getProductId(id);\n    localStorage.setItem(\n      \"productItems\",\n      JSON.stringify([...productId, ...bag])\n    );\n    this.setState((prevState) => ({\n      bag: [...prevState.bag, ...productId],\n    }));\n    this.props.countBag([...productId, ...bag]);\n    // const unique = bag.find((val) => val.id === id);\n    // if (!unique) {\n    //   this.setState((prevState) => ({\n    //     bag: [...prevState.bag, ...productId],\n    //   }));\n    //   this.props.countBag([...productId, ...bag]);\n    //   return localStorage.setItem(\n    //     \"productItems\",\n    //     JSON.stringify([...productId, ...bag])\n    //   );\n    // }\n  };\n\n  toggleCart = () => {\n    this.setState({ cartPage: !this.state.cartPage });\n  };\n\n  changeCategory = (e) => {\n    const { category } = e.target.dataset;\n    this.setState({ currentCategory: category });\n  };\n\n  render() {\n    const {\n      productAll,\n      priceHomePage,\n      cartPage,\n      currentItem,\n      activeSymbol,\n      bag,\n      category,\n      currentCategory,\n    } = this.state;\n    const { symbolCard, modalBag, toggle } = this.props;\n    return (\n      <main>\n        {cartPage && (\n          <ModalBag\n            symbol={symbolCard}\n            toggle={toggle}\n            toggleCart={this.toggleCart}\n            cart={cartPage}\n          />\n        )}\n        {!currentItem && !cartPage && (\n          <>\n            <div className={modalBag ? \"backdrop\" : \"\"}></div>\n            <div className=\"container\">\n              {category.length > 0 &&\n                category.map((categoryName) => {\n                  return (\n                    <button\n                      onClick={this.changeCategory}\n                      data-category={categoryName}\n                      key={v4()}\n                      className=\"category-name\"\n                    >\n                      {categoryName}\n                    </button>\n                  );\n                })}\n              <ul className=\"gallery_list\">\n                {productAll.length > 0 &&\n                  productAll.map(\n                    (\n                      { product, id, name, price, brand, inStock, category },\n                      inx\n                    ) => {\n                      if (category === currentCategory.toLowerCase()) {\n                        return (\n                          <li\n                            onClick={this.getId}\n                            onMouseOver={this.getId}\n                            id={id}\n                            className={\n                              inStock\n                                ? \"gallery_item\"\n                                : \"gallery_item--disabled\"\n                            }\n                            key={v4()}\n                          >\n                            <img\n                              height=\"330\"\n                              src={product}\n                              alt=\"our products\"\n                            />\n\n                            <p\n                              className={\n                                inStock\n                                  ? \"gallery_brand\"\n                                  : \"gallery_brand--disabled\"\n                              }\n                            >\n                              {`${brand} ${name}`}\n                            </p>\n                            <p\n                              className={\n                                inStock\n                                  ? \"gallery_price\"\n                                  : \"gallery_price--disabled\"\n                              }\n                            >\n                              {symbolCard}\n                              {productAll.length > 0 &&\n                                price.map((data) => {\n                                  return priceHomePage\n                                    .filter(\n                                      (val, ind, arr) =>\n                                        arr.indexOf(val) === ind\n                                    )\n                                    .find((val, ind) => {\n                                      if (\n                                        inx === ind &&\n                                        val === data.amount &&\n                                        data.currency.symbol.trim() ===\n                                          symbolCard.trim()\n                                      ) {\n                                        return val;\n                                      }\n                                      return null;\n                                    });\n                                })}\n                            </p>\n                            {id === this.state.id && inStock && (\n                              <button\n                                id={id}\n                                onClick={this.addBag}\n                                className=\"btn_add-basket\"\n                                data-btn=\"button\"\n                              >\n                                <img\n                                  src={Basket}\n                                  alt=\"Add to basket\"\n                                  data-btn=\"button\"\n                                />\n                              </button>\n                            )}\n                            {!inStock && (\n                              <p className=\"gallery_out\">OUT OF STOCK</p>\n                            )}\n                          </li>\n                        );\n                      }\n                    }\n                  )}\n              </ul>\n            </div>\n          </>\n        )}\n        {modalBag && (\n          <ModalBag\n            symbol={symbolCard}\n            toggle={toggle}\n            toggleCart={this.toggleCart}\n            cart={cartPage}\n          />\n        )}\n        {currentItem && (\n          <ItemPage\n            modalBag={modalBag}\n            itemId={currentItem}\n            currentSymbol={activeSymbol}\n            addBag={this.addBag}\n          />\n        )}\n      </main>\n    );\n  }\n}\n",[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/header.js",[],[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/Api.js",[],[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/modalCurrency.js",[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/modalBag.js",[],[],"/Users/marknelovka/Desktop/Goit/React/shop/src/components/ItemPage.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":170,"column":7,"nodeType":"52","messageId":"53","endLine":170,"endColumn":10},{"ruleId":"54","severity":1,"message":"55","line":208,"column":23,"nodeType":"56","messageId":"57","endLine":208,"endColumn":25},"no-unused-vars","'bag' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]